ls - ah //查看当前文件夹的文件 -ah指包含了隐藏文件。
cd e: //回退或进入某个文件夹
rm <FILE> //删除某个文件

git init //创建本地版本库  当前库下出现一个.git文件用于管理版本库。
git config --global user.name //创建全局用户名
git config --global user.email //创建全局邮箱
git config user.name user.email //查看当前用户名或邮箱
//----------------------------------------------------------------------------------------
// git库只能跟踪文本文件的改动，如TXT文件、网页、程序代码等。但是不能追踪图片、视频
// 以及WORD和记事本等文件的改动，使用时要注意。编码方式首选UTF-8编码，既没有冲突又被
// 所有平台兼容。
//---------------------------------------------------------------------------------------------------------------

git add -A / <FILE> //把文件提交到暂存区，加入文件名是指当前文件提交，-A表示当前目录所有的改动文件提交。
git commmit -m "message" //把暂存区文件提交到版本库中 -m 表示添加注释内容。
git status //显示当前暂存区和工作区状态。查看是否有版本尚未提交。

//--------------------------------------------------------------------------------------------------------------
// git status是git库的重要命令，对每种状态做了详细的划分，
// 对于工作区修改或删除后尚未提交的内容显示： Changes not staged for commit.
// 对于已提交暂存区尚未提交至版本库的内容显示： Changes to be commited.
// 对于新建的文件显示： Untracked files.
//---------------------------------------------------------------------------------------------------------------

git diff HEAD-- <FILE> //显示当前版本库文件和工作区中的文件有何不同。
git log //查看版本日志 按Q返回查看状态。
git log --graph --pretty=oneline --abbrev-commit //版本日志完全体
git reflog //查看包含版本回退的日志。

git reset --hard HEAD^ / HEAD~N / <version_id>  //返回上（上N , 某个版本号）个版本的状态。
git reset HEAD <FILE> //撤销此次暂存区的提交。既可回退版本又可撤销提交。
git checkout --file //丢弃暂存区的修改，回退到上个版本或回退到添加至暂存区的修改。
git restore --staged <FILE> //丢弃暂存区的修改，回退到上个版本或回退到添加至暂存区的修改。
git rm //在版本库中删除某个文件。需要配合commit使用。

//------------------------------------------------------------------------------------------------------------
// 使用git reset只能撤销暂存区的提交 之后还需要补充git checkout或restore才能真正回退到初始版本库。
// 如果change后尚未add，或者add后的再次change且尚未commit 那么checkout或restore后可撤销change。
// 如果change后已经add，那么reset可以撤销add在使用checkout或者restore撤销change。
// 如果change后已经add且已经commit，那么只能版本回退即reset --hard HEAD。
//--------------------------------------------------------------------------------------------------------------

git remote add <origin> <ssh / http> //添加远程库库名为origin (远程库和本地库已经通过SSH加密远程链接前提下）
git remote -v //查看远程库的信息
git remote rm <BRNACH> //删除本地库和远程库的链接
git push(-u) origin <BRANCH> //把本地库推送到远程， 首次推送加-u参数会将两地同名分支向关联。
git pull(-u) <BRANCH > //把远程库拉取到本地
git clone <ssh / http> //把远程库克隆到本地
git branch --set-upstream-to=origin/<BRANCH> <BRANCH>//建立远程分支和本地分支的关联

//------------------------------------------------------------------------------------------------------------
// 远程库和本地库不需要时刻保持一致
// master是主分支，必须时刻同步
// dev是团队开发分支，团队成员都需在此基础上开发协作，因此需要同步
// feature是自己部分的开发分支，是否同步看需求
// bug分支仅用于修复本地bug 不需要提交同步
//------------------------------------------------------------------------------------------------------------


git checkout -b <BRANCH> //创造并切换到新分支（不加参数则指切换到已有分支）
git switch -c <BRANCH> //创造并切换到某一分支（不加参数则指切换到已有分支）
git branch //查看该库所有分支，并标出当前分支
git branch <BRANCH> //创建分支但不切换
git branch -d(-D) <BRANCH> //(强行)删除某一个分支
git merge <BRANCH> //使用Fast-forward快进合并方法把BRNACH分支合并到当前分支(切换到主分支)
git merge --no-ff - m "message" <BRANCH> //禁用快速分支模式，并添加注释。
git rebase //变基操作，使提交分叉历史变成一条直线看上去更加直观。

git stash //存储当前分支状态
git stash list //查看存储状态列表
git stash apply (stash@{n}) //恢复存储状态且stash list中不删除状态
git stash drop (stash@{n}) //配合apply使用，恢复后删除list的状态
git stash pop (stash@{n}) //恢复存储状态且stash list删除状态
git cherry-pick <commit_id> //复制一个特定的提交到当前的分支（一般用于前版本的bug修改）

//----------------------------------------------------------------------------------------------------------------
// 快速合并是把开发分支中与主分支不同的地方替换，但是如果主分支在相同的地方有了新的提交则无法快速合并
// 此时会发生快合冲突，git会在冲突部分标出两者不同的地方，需要手动修改再次提交。
// 使用--no-ff参数禁用快速合并模式是为了在log查看分支信息，防止快速合并后无法查阅曾经分支的合并信息。(主要是版本号）
//-------------------------------------------------------------------------------------------------------------------

git tag //查看当前tag信息
git tag <name> <commit_id> //给commit_id增加一个新标签，默认id是最新的commit_id
git tag -a <name> -m "message" <commit_id> //给commit_id增加一个新标签，并添加说明。
git push origin <tagname> //把某标签推到远程仓库
git push origin --tags //把所有标签推到远程仓库
git tag -d <tagname> //删除本地标签
git push origin :refs/tags/v0.9 //删除本地后同步删除远程库标签
git show <name> //查看标签对应的commit信息

// tag标签仅与commit挂钩，并不和分支挂钩。
//----------------------------------------------------------------------------------------------------------------------

// 仅用于配置Git 不常用的命令
git config --global color.ui true //配置颜色
git config --global alias.<com> <command> //将命令符简写

//----------------------------------------------------------------------------------------------------------------
// 要想使git忽略某些文件，需要在工作区的根目录下建立一个.gitignore文件，把文件名填入或者拓展名填入（拓展名前加*）
// 如果想在gitignore的忽略规则下设定特例，在文件名前加入！表示表示该文件忽略gitignore规则
// 在add+commit推送指当前git版本库即可实现忽略某些文件的追踪。
// 如果想要打破gitignore规则推送一些文件可以加入-f（force）强制推送如：
// git add -f <FILE>
// git check-ignore -v <FILE> 用于检查该文件是否被gitignore规则忽略。
//----------------------------------------------------------------------------------------------------------------